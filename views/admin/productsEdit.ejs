<%- include('./layouts/header.ejs') %>

<div class="container-fluid page-body-wrapper">
    <!-- partial:partials/_navbar.html -->
    <%- include('./layouts/nav.ejs') %>
    <!-- partial -->
    <div class="main-panel">
        <div class="content-wrapper">

            <div class="card">
                <div class="card-body" id="toload">
                    <form class="forms-sample"  enctype="multipart/form-data">
                        <!-- Update the form action endpoint and set enctype accordingly -->

                        <!-- Product Name -->
                        <div class="form-group row">
                            <label for="productName" class="col-sm-3 col-form-label">Product Name</label>
                            <div class="col-sm-9">
                                <input type="text" class="form-control" id="productName" name="name" placeholder="Product Name" value="<%= editProduct.name %>" required>
                                <small id="nameError" class="text-danger" data-error-id="productNameError"></small>
                            </div>
                        </div>

                        <!-- Product Description -->
                        <div class="form-group row"  >
                            <label for="productDescription" class="col-sm-3 col-form-label">Product Description</label>
                            <div class="col-sm-9">
                                <textarea class="form-control" id="productDescription" name="description" placeholder="Product Description" required><%= editProduct.description %></textarea>
                                <small id="descriptionError" class="text-danger" data-error-id="productDescriptionError"></small>
                            </div>
                        </div>

                        <!-- Product Quantity -->
                        <div class="form-group row">
                            <label for="productQuantity" class="col-sm-3 col-form-label">Product Quantity</label>
                            <div class="col-sm-9">
                                <input type="number" class="form-control" id="productQuantity" name="quantity" placeholder="Product Quantity" value="<%= editProduct.quantity %>" required>
                                <small id="quantityError" class="text-danger" data-error-id="productQuantityError"></small>
                            </div>
                        </div>
                        
                        <div class="form-group row">
                            <label for="productOffers" class="col-sm-3 col-form-label">Offers</label>
                            <div class="col-sm-9">
                                <select class="form-control" id="productOffers" name="offers">
                                    <option value="">Select an offer</option>
                                    <% offers.forEach(offer => { %>
                                   
                                        <option value="<%= offer.name %>" <% if (editProduct && editProduct.offername == offer.name) { %>selected<% } %>><%= offer.name %></option>
                                    <% }); %>
                                </select>
                                <small id="offersError" class="text-danger"></small>
                            </div>
                        </div>

                        <!-- Product Price -->
                        <div class="form-group row">
                            <label for="productPrice" class="col-sm-3 col-form-label">Product Price</label>
                            <div class="col-sm-9">
                                <input type="number" class="form-control" id="productPrice" name="price" placeholder="Product Price" value="<%= editProduct.price %>" required>
                                <small id="priceError" class="text-danger" data-error-id="productPriceError"></small>
                            </div>
                        </div>

                        <!-- Product Images -->
                        <div class="form-group row" >
                            <label for="productImages" class="col-sm-3 col-form-label">Product Images</label>
                            <div class="col-sm-9">
                                <% for (let i = 0; i < editProduct.pictures.length; i++) { %>
                                    <% let s=  editProduct.pictures[i].replace('public','') %>
                                   
                                    <div class="mb-3">
                                        <!-- Display existing image and provide option to delete -->
                                        <img src="<%= s%>" alt="Product Image" style="max-width: 100px; max-height: 100px; cursor: pointer;" onclick="selectImage('<%= i %>')">
                                        <button type="button" class="btn btn-danger btn-sm mt-2" onclick="deleteImage('<%= i %>')"><a href="/admin/products/editdelete?id=<%=editProduct._id%>&img=<%=editProduct.pictures[i]%>" class="text-white">Delete</a></button>
                                    </div>
                                <% } %>
                                <!-- Option to add new images -->
                                <input type="file" class="form-control-file mt-2" name="newImages" accept="image/*" id="productImages" onchange="displaySelectedNewImage(this)" multiple>
                                <small id="imagesError" class="text-danger" data-error-id="productImagesError"></small>
                                <div id="imagePreview" class="mt-2"></div>
                            </div>
                        </div>

                        <!-- Other form fields... -->

                        <button type="button" class="btn btn-primary mr-2" onclick="return validateForm(<%=editProduct.pictures.length%>);">Submit</button>
                        <button class="btn btn-dark">Cancel</button>
                    </form>
                    <p class="text-success"> <%= message %></p>
                </div>
            </div>
       
    <!-- content-wrapper ends -->
    <!-- partial:partials/_footer.html -->
    <footer class="footer">
        <div class="d-sm-flex justify-content-center justify-content-sm-between">
            <span class="text-muted d-block text-center text-sm-left d-sm-inline-block">Aura Beauty</span>
        </div>
    </footer>
    <!-- partial -->
    </div>
    <!-- main-panel ends -->
</div>
<!-- page-body-wrapper ends -->
</div>
<!-- container-scroller -->

<%- include('./layouts/footer.ejs') %>
<script>
     let v=[];let pictures=[]
    function validateForm(l) {
        
   const productNameInput = document.getElementById('productName');
    const productDescriptionInput = document.getElementById('productDescription');
    const productQuantityInput = document.getElementById('productQuantity');
    const productPriceInput = document.getElementById('productPrice');
    const productImagesInput = document.getElementById('productImages');

    
    const nameError = document.getElementById('nameError');
    const priceError = document.getElementById('priceError');
    const descriptionError = document.getElementById('descriptionError');
    const categoryError = document.getElementById('categoryError');
    const quantityError = document.getElementById('quantityError');
    const dateError = document.getElementById('dateError');
    const imagesError = document.getElementById('imagesError');

    const productName = productNameInput.value.trim();
    const productDescription = productDescriptionInput.value.trim();
    const productQuantity = productQuantityInput.value
    const productPrice = productPriceInput.value
    const productImages = productImagesInput.files;
    const nameRegex = /^[a-zA-Z]+$/;
 
    let errors = {};
    for (let i = 0; i < productImages.length; i++) {
        if(!v.includes(i))
        {
            pictures.push( productImages[i])
            
        }
       
    }
   
   
if (productName === '') {
    errors.productName = 'Product name should contain only letters and cannot be empty.';
    nameError.textContent = errors.productName;
    productNameInput.focus();
    
    return false}
 else {
    nameError.textContent = '';
}

// Product Price Validation
if (isNaN(productPrice) || productPrice <= 0) {
    errors.productPrice = 'Product price should be a valid positive number.';
    priceError.textContent = errors.productPrice;
    productPriceInput.focus();
    return false
} else {
    priceError.textContent = '';
}

// Product Description Validation
if (productDescription === '') {
    errors.productDescription = 'Product description cannot be empty.';
    descriptionError.textContent = errors.productDescription;
    productDescriptionInput.focus();
    return false
} else {
    descriptionError.textContent = '';
}


// Product Quantity Validation
if (isNaN(productQuantity) || productQuantity <= 0) {
    errors.productQuantity = 'Quantity should be a valid positive number.';
    quantityError.textContent = errors.productQuantity;
    productQuantityInput.focus();
    return false
} else {
    quantityError.textContent = '';
}


// Product Images Validation
if (!validateImages(pictures,l)) {
    errors.productImages = `Please select valid and atmost 5 images.`;
    imagesError.textContent = errors.productImages;
    productImagesInput.focus();
    pictures=[]
    return false
} else {
    imagesError.textContent = '';
}

const productOffersInput = document.getElementById('productOffers');
    const productOffers = productOffersInput.value;

const formData = new FormData();
    formData.append('name', productName);
    formData.append('description', productDescription);
    formData.append('quantity', productQuantity);
    formData.append('price', productPrice);
    for (let i = 0; i < pictures.length; i++) {
       
            
            formData.append('newImages', pictures[i]);
        
       
    }
    
formData.append('offers', productOffers);

    
    console.log(pictures)

    // Fetch request to send data to the server
    fetch(`/admin/products/editpost?id=<%= editProduct._id %>`, {
        method: 'POST',
        body: formData,
    })
    .then(response => response.json())
    .then(data => {
       if(data.success==true)
       {
        $('#toload').load(`/admin/products/edit?id=<%= editProduct._id %> #toload`)
       }
       else{
        var encodedMessage = encodeURIComponent(data.message);
        $('#toload').load(`/admin/products/edit?id=<%= editProduct._id %>&message=${encodedMessage} #toload`)
       }
    })
    .catch(error => {
        console.error('Error:', error);
    });

    return true;
}
    function validateImages(images,len) {
    const allowedExtensions = ['jpg', 'jpeg', 'png', 'gif', 'webp', 'avif'];
    let newlen=images.length+len
    console.log(images.length,len,newlen)
    if (newlen === 0 || newlen > 5) {
        return false;
    }

    for (const file of images) {
        const fileName = file.name.toLowerCase();
        const extension = fileName.split('.').pop();
        if (!allowedExtensions.includes(extension)) {
            return false;
        }
    }

    return true;
}

    function selectImage(index) {
        console.log(`Selecting image ${index}`);
        document.getElementById(`productImageInput${index}`).click();
    }

    
    function deleteImage(index) {
    console.log(`Deleting image ${index}`);
   
   
  v.push(index)

   
   
}


function displaySelectedNewImage(input) {
    var previewContainer = document.getElementById('imagePreview');
    var files = input.files;
    previewContainer.innerHTML = '';
    var targetHeight = 40; 

    for (let i = 0; i < files.length; i++) {
        let file = files[i];
        let reader = new FileReader();

        reader.onload = function (e) {
            var imageContainer = document.createElement('div');
            imageContainer.style.height = targetHeight + 'vh';
            imageContainer.style.width = 'auto'; 
            imageContainer.style.overflow = 'hidden';

            var image = document.createElement('img');
            image.src = e.target.result;
            image.classList.add('img-thumbnail', 'mr-2');

            // Calculate the aspect ratio of the image
            var aspectRatio = image.naturalWidth / image.naturalHeight;

            // Calculate the width to maintain the aspect ratio with the target height
            var newWidth = targetHeight * aspectRatio;

            image.style.width = newWidth + 'vh'; 
            image.style.height = targetHeight + 'vh'; 

            var closeButton = document.createElement('button');
            closeButton.innerHTML = '&times;';
            closeButton.classList.add('btn', 'btn-sm', 'btn-danger');
            closeButton.addEventListener('click', function () {
                // Remove the entire container when the close button is clicked
                previewContainer.removeChild(imageContainer);
                deleteImage(i); 
            });

            // Append the image and close button to the container
            imageContainer.appendChild(image);
            imageContainer.appendChild(closeButton);

            // Append the container to the previewContainer
            previewContainer.appendChild(imageContainer);
        };

        reader.readAsDataURL(file);
    }
}
</script>